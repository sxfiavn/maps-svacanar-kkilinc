<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="41" tokens="144">
      <file column="3" endcolumn="13" endline="122" line="82"
            path="/Users/nicolaskim/Desktop/cs320/server-nickkim1-dita-hss/src/main/java/edu/brown/cs/student/main/server/datasource/broadband_caching/CachedBroadbandDataSource.java"/>
      <file column="3" endcolumn="13" endline="149" line="109"
            path="/Users/nicolaskim/Desktop/cs320/server-nickkim1-dita-hss/src/main/java/edu/brown/cs/student/main/server/datasource/broadband_no_caching/CensusAPIBroadbandSource.java"/>
      <codefragment><![CDATA[  }

  /**
   * Iterates over a nested list of state names to codes to find the corresponding state code for
   * the queried state name.
   *
   * @param stateName A string representing the name of the state queried for.
   * @return The corresponding code for the queried state name.
   */
  public String findStateCode(String stateName) {
    String stateCode = null;
    System.out.println("this is the passed in state name: " + stateName);
    for (List<String> l : DataStorage.getStateNamesToCodes()) {
      if (l.get(0).equalsIgnoreCase(stateName)) {
        stateCode = l.get(1);
        System.out.println("this is the state code: " + stateCode);
        break;
      }
    }
    return stateCode;
  }

  /**
   * Method that gets the corresponding county code from a passed in county name.
   *
   * @param stateCode Code of the state. Used to query for a specific state.
   * @return A nested list that stores the correspondence of county names to codes within a specific
   *     state.
   * @throws DatasourceException if the API server throws an IO exception.
   */
  public List<List<String>> getCountyNamesToCodes(String stateCode) throws DatasourceException {
    try {
      System.out.println("Connecting to ACS API for CountyNamesToCodes Data...");
      URL requestURL =
          new URL(
              "https",
              "api.census.gov",
              "/data/2010/dec/sf1?get=NAME&for=county:*&in=state:" + stateCode);
      Type listOfLists = Types.newParameterizedType(List.class, List.class);
      return MoshiUtils.fetchAndDeserialize(requestURL, listOfLists);
    } catch (IOException e) {]]></codefragment>
   </duplication>
   <duplication lines="33" tokens="117">
      <file column="57" endcolumn="3" endline="156" line="124"
            path="/Users/nicolaskim/Desktop/cs320/server-nickkim1-dita-hss/src/main/java/edu/brown/cs/student/main/server/datasource/broadband_caching/CachedBroadbandDataSource.java"/>
      <file column="27" endcolumn="3" endline="184" line="151"
            path="/Users/nicolaskim/Desktop/cs320/server-nickkim1-dita-hss/src/main/java/edu/brown/cs/student/main/server/datasource/broadband_no_caching/CensusAPIBroadbandSource.java"/>
      <codefragment><![CDATA[      throw new DatasourceException("Exception occurred");
    }
  }

  /**
   * Helper method that finds the county code from a list of lists of county names to their codes.
   *
   * @param countyName A string of county name.
   * @param stateName A string of state name.
   * @param countiesToCodes A nested list mapping county names to their codes.
   * @return A string of the country code that matches the given country name.
   */
  public String findCountyCode(
      String countyName, String stateName, List<List<String>> countiesToCodes) {
    String countyCode = null;
    String countyWithName;

    // Standardizes the queries so that they all end with County
    if (countyName.endsWith(" County")) {
      countyWithName = countyName;
    } else {
      countyWithName = countyName + " County";
    }

    for (List<String> l : countiesToCodes) {
      if (l.get(0).equalsIgnoreCase(countyWithName + ", " + stateName)
          || l.get(0).equalsIgnoreCase(countyName + ", " + stateName)) {
        countyCode = l.get(l.size() - 1);
        break;
      }
    }
    return countyCode;
  }]]></codefragment>
   </duplication>
</pmd-cpd>